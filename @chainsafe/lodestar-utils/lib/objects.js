"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.objectToExpectedCase = exports.mapValues = exports.isPlainObject = void 0;
// eslint-disable-next-line no-restricted-imports
const json_1 = require("@chainsafe/ssz/lib/util/json");
/* eslint-disable @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment */
function isObjectObject(val) {
    return val != null && typeof val === "object" && Array.isArray(val) === false;
}
function isPlainObject(o) {
    if (isObjectObject(o) === false)
        return false;
    // If has modified constructor
    const ctor = o.constructor;
    if (typeof ctor !== "function")
        return false;
    // If has modified prototype
    const prot = ctor.prototype;
    if (isObjectObject(prot) === false)
        return false;
    // If constructor does not have an Object-specific method
    if (prot.hasOwnProperty("isPrototypeOf") === false) {
        return false;
    }
    // Most likely a plain Object
    return true;
}
exports.isPlainObject = isPlainObject;
/**
 * Creates an object with the same keys as object and values generated by running each own enumerable
 * string keyed property of object thru iteratee.
 *
 * Inspired on lodash.mapValues, see https://lodash.com/docs/4.17.15#mapValues
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function mapValues(obj, iteratee) {
    const output = {};
    for (const [key, value] of Object.entries(obj)) {
        output[key] = iteratee(value, key);
    }
    return output;
}
exports.mapValues = mapValues;
function objectToExpectedCase(obj, expectedCase = "camel") {
    if (Array.isArray(obj)) {
        const newArr = [];
        for (let i = 0; i < obj.length; i++) {
            newArr[i] = objectToExpectedCase(obj[i], expectedCase);
        }
        return newArr;
    }
    if (Object(obj) === obj) {
        const newObj = {};
        for (const name of Object.getOwnPropertyNames(obj)) {
            const newName = (0, json_1.toExpectedCase)(name, expectedCase);
            if (newName !== name && obj.hasOwnProperty(newName)) {
                throw new Error(`object already has a ${newName} property`);
            }
            newObj[newName] = objectToExpectedCase(obj[name], expectedCase);
        }
        return newObj;
    }
    return obj;
}
exports.objectToExpectedCase = objectToExpectedCase;
//# sourceMappingURL=objects.js.map