"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPassphraseFile = exports.isVotingKeystore = exports.recursivelyFindVotingKeystores = exports.recursivelyFind = void 0;
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = __importDefault(require("node:path"));
const paths_1 = require("../validatorDir/paths");
/**
 * Find files recursively in `dirPath` whose filename matches a custom function
 * @param dirPath
 * Return `true` for a given filepath to be included
 * @param filenameMatcher
 */
function recursivelyFind(dirPath, filenameMatcher) {
    let filepaths = [];
    for (const filename of node_fs_1.default.readdirSync(dirPath)) {
        const filepath = node_path_1.default.join(dirPath, filename);
        if (node_fs_1.default.statSync(filepath).isDirectory()) {
            filepaths = filepaths.concat(recursivelyFind(filepath, filenameMatcher));
        }
        else if (filenameMatcher(filename)) {
            filepaths.push(filepath);
        }
    }
    return filepaths;
}
exports.recursivelyFind = recursivelyFind;
/**
 * Find voting keystores recursively in `dirPath`
 */
function recursivelyFindVotingKeystores(dirPath) {
    return recursivelyFind(dirPath, isVotingKeystore);
}
exports.recursivelyFindVotingKeystores = recursivelyFindVotingKeystores;
/**
 * Returns `true` if we should consider the `filename` to represent a voting keystore.
 */
function isVotingKeystore(filename) {
    // All formats end with `.json`.
    return (filename.endsWith(".json") &&
        // Keystores generated by clients
        (filename === paths_1.VOTING_KEYSTORE_FILE ||
            // The format exported by the `eth2.0-deposit-cli` library.
            //
            // Reference to function that generates keystores:
            // eslint-disable-next-line max-len
            // https://github.com/ethereum/eth2.0-deposit-cli/blob/7cebff15eac299b3b1b090c896dd3410c8463450/eth2deposit/credentials.py#L58-L62
            //
            // Since we include the key derivation path of `m/12381/3600/x/0/0` this should only ever match
            // with a voting keystore and never a withdrawal keystore.
            //
            // Key derivation path reference:
            //
            // https://eips.ethereum.org/EIPS/eip-2334
            /keystore-m_12381_3600_[0-9]+_0_0-[0-9]+.json/.test(filename)));
}
exports.isVotingKeystore = isVotingKeystore;
/**
 * Returns true if filename is a BLS Keystore passphrase file
 */
function isPassphraseFile(filename) {
    return /[0-9A-Fa-f]{96}/.test(filename);
}
exports.isPassphraseFile = isPassphraseFile;
//# sourceMappingURL=recursivelyFind.js.map